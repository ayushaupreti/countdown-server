{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthorizerUnderscoreonlineLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-authorizer_online"
      }
    },
    "PreSignUpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-preSignUp"
      }
    },
    "DefineAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-defineAuthChallenge"
      }
    },
    "CreateAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-createAuthChallenge"
      }
    },
    "VerifyAuthChallengeResponseLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-verifyAuthChallengeResponse"
      }
    },
    "PostEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-postEvent"
      }
    },
    "GetAllEventsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-getAllEvents"
      }
    },
    "ViewEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-viewEvent"
      }
    },
    "UpdateEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-updateEvent"
      }
    },
    "DeleteEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-deleteEvent"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "countdown-server",
                  "prod",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/countdown-server-prod*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/countdown-server-prod*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query",
                    "dynamodb:DeleteItem",
                    "ses:SendEmail"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "countdown-server",
              "prod",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthorizerUnderscoreonlineLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/authorizer_online.zip"
        },
        "Handler": "lambdas/authorizer/online.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-authorizer_online",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "security authorizer for online cognito access token check",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthorizerUnderscoreonlineLogGroup"
      ]
    },
    "AuthorizerUnderscoreonlineLambdaVersionFNdz5FdHgoXKifelXSTRYZ8OhT2VUKz4LQT1aFsn6Vs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizerUnderscoreonlineLambdaFunction"
        },
        "CodeSha256": "hcDl4CZlcOh0LFN4RT6WXYeZ1JsYuxIZajiRTSMUfvk=",
        "Description": "security authorizer for online cognito access token check"
      }
    },
    "PreSignUpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/preSignUp.zip"
        },
        "Handler": "lambdas/cognito/pre-signup.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-preSignUp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - auto confirm user before signup",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PreSignUpLogGroup"
      ]
    },
    "PreSignUpLambdaVersionCHqAwIV7su9BevX8hJYN4XHArwxhY6Cppm9rbAdktw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PreSignUpLambdaFunction"
        },
        "CodeSha256": "/gRPmZDGRPJ6jNRdX4yhInYfCbia+S0fJYi3sUjjAt4=",
        "Description": "COGNITO - auto confirm user before signup"
      }
    },
    "DefineAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/defineAuthChallenge.zip"
        },
        "Handler": "lambdas/cognito/define-auth-challenge.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-defineAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - manage flow of custom auth",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DefineAuthChallengeLogGroup"
      ]
    },
    "DefineAuthChallengeLambdaVersionLHzZdH0mQgyOkcQyYsW372fsI1PfJA1xuj1yxftnpgk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefineAuthChallengeLambdaFunction"
        },
        "CodeSha256": "pMwFNU3Y67wmF8aSW4UHJCem75NW3utTX/bB5Q9Hrtk=",
        "Description": "COGNITO - manage flow of custom auth"
      }
    },
    "CreateAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/createAuthChallenge.zip"
        },
        "Handler": "lambdas/cognito/create-auth-challenge.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-createAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - create and email unique OTP",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAuthChallengeLogGroup"
      ]
    },
    "CreateAuthChallengeLambdaVersionFORukbcNLLOjkAdg0TVaeOavOvQn5eR0Vm4ytYbTfY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAuthChallengeLambdaFunction"
        },
        "CodeSha256": "uRZKKVENCqYoEZ7LrsFEvqofLuegj26hG6ZBrwohnew=",
        "Description": "COGNITO - create and email unique OTP"
      }
    },
    "VerifyAuthChallengeResponseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/verifyAuthChallengeResponse.zip"
        },
        "Handler": "lambdas/cognito/verify-auth-challenge-response.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-verifyAuthChallengeResponse",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - check if user entered correct OTP",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyAuthChallengeResponseLogGroup"
      ]
    },
    "VerifyAuthChallengeResponseLambdaVersionWOcBqrtLSnDPTjPAaShEJMJDDWmlCsFrNU6AxpX8JQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyAuthChallengeResponseLambdaFunction"
        },
        "CodeSha256": "FNkVO/sTaasy4VXpcXH+i958nCClLX/fgbNEvz2wq30=",
        "Description": "COGNITO - check if user entered correct OTP"
      }
    },
    "PostEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/postEvent.zip"
        },
        "Handler": "lambdas/postEvent.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-postEvent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "adds new event to database",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PostEventLogGroup"
      ]
    },
    "PostEventLambdaVersionxMzcwWkUZwvkJjU6N4QfR92WL9HnHsv5ylVggUOA3Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostEventLambdaFunction"
        },
        "CodeSha256": "MPHHQGv9i/hDKql2MGiPPb1KUe3lTL7vILUkp4CVAMc=",
        "Description": "adds new event to database"
      }
    },
    "GetAllEventsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/getAllEvents.zip"
        },
        "Handler": "lambdas/getAllEvents.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-getAllEvents",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "gets all events a specific user has created",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllEventsLogGroup"
      ]
    },
    "GetAllEventsLambdaVersionmARnqjg7oOmgN7clHTcBuPll9ngaqELkvGdiwIzTGE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllEventsLambdaFunction"
        },
        "CodeSha256": "CsmvHpE88IF+ff1LsmfZ+THX8P6q/GW6z79OlSt6iSg=",
        "Description": "gets all events a specific user has created"
      }
    },
    "ViewEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/viewEvent.zip"
        },
        "Handler": "lambdas/viewEvent.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-viewEvent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "gets information for one event",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ViewEventLogGroup"
      ]
    },
    "ViewEventLambdaVersionyUkIeaBYifVBImMlURU2ewdYMqs4UPc7k7d3xuElg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ViewEventLambdaFunction"
        },
        "CodeSha256": "4SDNm2PJiNpZMV97TxhQsG/gVDhhtda512bM5wWhE1Q=",
        "Description": "gets information for one event"
      }
    },
    "UpdateEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/updateEvent.zip"
        },
        "Handler": "lambdas/updateEvent.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-updateEvent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "updates the specified event",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEventLogGroup"
      ]
    },
    "UpdateEventLambdaVersionudWW6soLubqM6e8zFgiXzfh4CrilJ71x2W1XkaEwXVk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEventLambdaFunction"
        },
        "CodeSha256": "hNJ5n8GoBkFjew6LIwiaLRa7lq9SN/bv7bvo3u8hN9I=",
        "Description": "updates the specified event"
      }
    },
    "DeleteEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625584802276-2021-07-06T15:20:02.276Z/deleteEvent.zip"
        },
        "Handler": "lambdas/deleteEvent.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-deleteEvent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "deletes the specified event",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "USER_POOL_ID": "us-east-1_nMl2Znmzc",
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteEventLogGroup"
      ]
    },
    "DeleteEventLambdaVersionc1SdAIm2Bio8EOWuQLBl0PpVuhxquVt84xp3T0lWno": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteEventLambdaFunction"
        },
        "CodeSha256": "EAJuerI9GMuQ5Y77JQfsYBMO2ARjqO+5dILzPH2mZ54=",
        "Description": "deletes the specified event"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-countdown-server",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceEvent": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "event",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventEventidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "PathPart": "{eventId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEvents": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "events",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvents"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventEventidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventEventidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PostEventLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
    },
    "ApiGatewayMethodEventsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvents"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllEventsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
    },
    "ApiGatewayMethodEventEventidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventEventidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ViewEventLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
    },
    "ApiGatewayMethodEventEventidVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventEventidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateEventLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
    },
    "ApiGatewayMethodEventEventidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventEventidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteEventLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthorizerUnderscoreonlineApiGatewayAuthorizer"
    },
    "AuthorizerUnderscoreonlineApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 240,
        "IdentitySource": "method.request.header.token",
        "Name": "authorizer_online",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthorizerUnderscoreonlineLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1625584796504": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodEventOptions",
        "ApiGatewayMethodEventsOptions",
        "ApiGatewayMethodEventEventidVarOptions",
        "ApiGatewayMethodEventPost",
        "ApiGatewayMethodEventsGet",
        "ApiGatewayMethodEventEventidVarGet",
        "ApiGatewayMethodEventEventidVarPut",
        "ApiGatewayMethodEventEventidVarDelete"
      ]
    },
    "PostEventLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AuthorizerUnderscoreonlineLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizerUnderscoreonlineLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllEventsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllEventsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ViewEventLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ViewEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateEventLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteEventLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CognitoUserPoolCountdownuserpool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "countdown-user-pool",
        "LambdaConfig": {
          "PreSignUp": {
            "Fn::GetAtt": [
              "PreSignUpLambdaFunction",
              "Arn"
            ]
          },
          "DefineAuthChallenge": {
            "Fn::GetAtt": [
              "DefineAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "CreateAuthChallenge": {
            "Fn::GetAtt": [
              "CreateAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "VerifyAuthChallengeResponse": {
            "Fn::GetAtt": [
              "VerifyAuthChallengeResponseLambdaFunction",
              "Arn"
            ]
          }
        }
      },
      "DependsOn": [
        "PreSignUpLambdaFunction",
        "DefineAuthChallengeLambdaFunction",
        "CreateAuthChallengeLambdaFunction",
        "VerifyAuthChallengeResponseLambdaFunction"
      ]
    },
    "PreSignUpLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourcePreSignUp": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreSignUpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "DefineAuthChallengeLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourceDefineAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DefineAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "CreateAuthChallengeLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourceCreateAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "VerifyAuthChallengeResponseLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourceVerifyAuthChallengeResponse": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyAuthChallengeResponseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "EventTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "eventId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "eventId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        },
        "TableName": "countdown-server-prod-EVENT_TABLE",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "UserId",
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "NonKeyAttributes": [
                "eventTitle",
                "eventDate"
              ],
              "ProjectionType": "INCLUDE"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 2,
              "WriteCapacityUnits": 2
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "AuthorizerUnderscoreonlineLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizerUnderscoreonlineLambdaVersionFNdz5FdHgoXKifelXSTRYZ8OhT2VUKz4LQT1aFsn6Vs"
      }
    },
    "PreSignUpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PreSignUpLambdaVersionCHqAwIV7su9BevX8hJYN4XHArwxhY6Cppm9rbAdktw"
      }
    },
    "DefineAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefineAuthChallengeLambdaVersionLHzZdH0mQgyOkcQyYsW372fsI1PfJA1xuj1yxftnpgk"
      }
    },
    "CreateAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAuthChallengeLambdaVersionFORukbcNLLOjkAdg0TVaeOavOvQn5eR0Vm4ytYbTfY"
      }
    },
    "VerifyAuthChallengeResponseLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyAuthChallengeResponseLambdaVersionWOcBqrtLSnDPTjPAaShEJMJDDWmlCsFrNU6AxpX8JQ"
      }
    },
    "PostEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostEventLambdaVersionxMzcwWkUZwvkJjU6N4QfR92WL9HnHsv5ylVggUOA3Y"
      }
    },
    "GetAllEventsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllEventsLambdaVersionmARnqjg7oOmgN7clHTcBuPll9ngaqELkvGdiwIzTGE"
      }
    },
    "ViewEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ViewEventLambdaVersionyUkIeaBYifVBImMlURU2ewdYMqs4UPc7k7d3xuElg"
      }
    },
    "UpdateEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEventLambdaVersionudWW6soLubqM6e8zFgiXzfh4CrilJ71x2W1XkaEwXVk"
      }
    },
    "DeleteEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteEventLambdaVersionc1SdAIm2Bio8EOWuQLBl0PpVuhxquVt84xp3T0lWno"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      }
    }
  }
}
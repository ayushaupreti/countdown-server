{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthorizerUnderscoreonlineLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-authorizer_online"
      }
    },
    "PreSignUpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-preSignUp"
      }
    },
    "DefineAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-defineAuthChallenge"
      }
    },
    "CreateAuthChallengeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-createAuthChallenge"
      }
    },
    "VerifyAuthChallengeResponseLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-verifyAuthChallengeResponse"
      }
    },
    "PostEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/countdown-server-prod-postEvent"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "countdown-server",
                  "prod",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/countdown-server-prod*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/countdown-server-prod*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "countdown-server",
              "prod",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthorizerUnderscoreonlineLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625267746178-2021-07-02T23:15:46.178Z/authorizer_online.zip"
        },
        "Handler": "lambdas/authorizer/online.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-authorizer_online",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "security authorizer for online cognito access token check",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthorizerUnderscoreonlineLogGroup"
      ]
    },
    "AuthorizerUnderscoreonlineLambdaVersion1Tuw1HU8HDYrvHFrJwWJGvi9d6i1u2ZtxiPVwTkxiw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizerUnderscoreonlineLambdaFunction"
        },
        "CodeSha256": "jck127yS+R/W7p8+QYm9VKW1MyBqGX314Ta1O/hbXrU=",
        "Description": "security authorizer for online cognito access token check"
      }
    },
    "PreSignUpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625267746178-2021-07-02T23:15:46.178Z/preSignUp.zip"
        },
        "Handler": "lambdas/cognito/pre-signup.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-preSignUp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - auto confirm user before signup",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PreSignUpLogGroup"
      ]
    },
    "PreSignUpLambdaVersion3Kwa2s3mDjzGzfryMI5rINlmX7JrIlTpI3ITtA2zc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PreSignUpLambdaFunction"
        },
        "CodeSha256": "NtUPPorXQFApvkhXKRHWswNyXiJ8j0RDqf/fwBlUs+A=",
        "Description": "COGNITO - auto confirm user before signup"
      }
    },
    "DefineAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625267746178-2021-07-02T23:15:46.178Z/defineAuthChallenge.zip"
        },
        "Handler": "lambdas/cognito/define-auth-challenge.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-defineAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - manage flow of custom auth",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DefineAuthChallengeLogGroup"
      ]
    },
    "DefineAuthChallengeLambdaVersion6e7pgiflobVtl5YO6pqO2vtGCVMbaw4GmCqikaWBA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefineAuthChallengeLambdaFunction"
        },
        "CodeSha256": "LQVbF03avNZ9lq6gyKHeaCM/W5BBi1//MOd8kWwmA9M=",
        "Description": "COGNITO - manage flow of custom auth"
      }
    },
    "CreateAuthChallengeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625267746178-2021-07-02T23:15:46.178Z/createAuthChallenge.zip"
        },
        "Handler": "lambdas/cognito/create-auth-challenge.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-createAuthChallenge",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - create and email unique OTP",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAuthChallengeLogGroup"
      ]
    },
    "CreateAuthChallengeLambdaVersionObdiuujyUfVncLhYFtIB69aTgms1Bsp4aUb7IhzAY4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAuthChallengeLambdaFunction"
        },
        "CodeSha256": "h6Z4WPxWn8EvCVu6XTSQhHULrcOska4emQrJLTp7X78=",
        "Description": "COGNITO - create and email unique OTP"
      }
    },
    "VerifyAuthChallengeResponseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625267746178-2021-07-02T23:15:46.178Z/verifyAuthChallengeResponse.zip"
        },
        "Handler": "lambdas/cognito/verify-auth-challenge-response.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-verifyAuthChallengeResponse",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "COGNITO - check if user entered correct OTP",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyAuthChallengeResponseLogGroup"
      ]
    },
    "VerifyAuthChallengeResponseLambdaVersionCSli274h3CVEjvOEGlK7UxuldYCMdRvldRSpqxCac": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyAuthChallengeResponseLambdaFunction"
        },
        "CodeSha256": "R/Qx7gW91QYlbo7gfJQ7eAc1wGcYWbkMQ+Md8qDFnBY=",
        "Description": "COGNITO - check if user entered correct OTP"
      }
    },
    "PostEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/countdown-server/prod/1625267746178-2021-07-02T23:15:46.178Z/postEvent.zip"
        },
        "Handler": "lambdas/postEvent.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "countdown-server-prod-postEvent",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "adds new event to database",
        "Environment": {
          "Variables": {
            "EVENT_TABLE": {
              "Ref": "EventTable"
            },
            "SES_FROM_ADDRESS": "no-reply@ayusha.net"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PostEventLogGroup"
      ]
    },
    "PostEventLambdaVersion3JoHxUxO2ktzJySGGt1XfhDXvEhzo9U8pBevtleW28": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostEventLambdaFunction"
        },
        "CodeSha256": "xW82d9slx4CHiBIrVlm5oVRH9fLhkA/J65cVdxuTWKc=",
        "Description": "adds new event to database"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-countdown-server",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceEvent": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "event",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvent"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PostEventLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1625267740995": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodEventOptions",
        "ApiGatewayMethodEventPost"
      ]
    },
    "PostEventLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CognitoUserPoolCountdownuserpool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "countdown-user-pool",
        "LambdaConfig": {
          "PreSignUp": {
            "Fn::GetAtt": [
              "PreSignUpLambdaFunction",
              "Arn"
            ]
          },
          "DefineAuthChallenge": {
            "Fn::GetAtt": [
              "DefineAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "CreateAuthChallenge": {
            "Fn::GetAtt": [
              "CreateAuthChallengeLambdaFunction",
              "Arn"
            ]
          },
          "VerifyAuthChallengeResponse": {
            "Fn::GetAtt": [
              "VerifyAuthChallengeResponseLambdaFunction",
              "Arn"
            ]
          }
        }
      },
      "DependsOn": [
        "PreSignUpLambdaFunction",
        "DefineAuthChallengeLambdaFunction",
        "CreateAuthChallengeLambdaFunction",
        "VerifyAuthChallengeResponseLambdaFunction"
      ]
    },
    "PreSignUpLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourcePreSignUp": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PreSignUpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "DefineAuthChallengeLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourceDefineAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DefineAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "CreateAuthChallengeLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourceCreateAuthChallenge": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAuthChallengeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "VerifyAuthChallengeResponseLambdaPermissionCognitoUserPoolCountdownuserpoolTriggerSourceVerifyAuthChallengeResponse": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyAuthChallengeResponseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CognitoUserPoolCountdownuserpool",
            "Arn"
          ]
        }
      }
    },
    "EventTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "eventId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "friendlyEventId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "eventId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        },
        "TableName": "countdown-server-prod-EVENT_TABLE",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "FriendlyEventId",
            "KeySchema": [
              {
                "AttributeName": "friendlyEventId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "NonKeyAttributes": [
                "eventTitle",
                "eventDate"
              ],
              "ProjectionType": "INCLUDE"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 2,
              "WriteCapacityUnits": 2
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "AuthorizerUnderscoreonlineLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizerUnderscoreonlineLambdaVersion1Tuw1HU8HDYrvHFrJwWJGvi9d6i1u2ZtxiPVwTkxiw"
      }
    },
    "PreSignUpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PreSignUpLambdaVersion3Kwa2s3mDjzGzfryMI5rINlmX7JrIlTpI3ITtA2zc"
      }
    },
    "DefineAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefineAuthChallengeLambdaVersion6e7pgiflobVtl5YO6pqO2vtGCVMbaw4GmCqikaWBA"
      }
    },
    "CreateAuthChallengeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAuthChallengeLambdaVersionObdiuujyUfVncLhYFtIB69aTgms1Bsp4aUb7IhzAY4"
      }
    },
    "VerifyAuthChallengeResponseLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyAuthChallengeResponseLambdaVersionCSli274h3CVEjvOEGlK7UxuldYCMdRvldRSpqxCac"
      }
    },
    "PostEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostEventLambdaVersion3JoHxUxO2ktzJySGGt1XfhDXvEhzo9U8pBevtleW28"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      }
    }
  }
}
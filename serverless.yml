service: countdown-server

plugins:
  - serverless-bundle

package:
  individually: true
  exclude:
   - readme.md
   - .gitignore
   - lambdas/**

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

  environment:
    EVENT_TABLE: { "Ref": "EventTable" }
    USER_POOL_ID: us-east-1_nMl2Znmzc
    SES_FROM_ADDRESS: no-reply@ayusha.net

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - ses:SendEmail
      Resource: "*"

functions:
  authorizer_online:
    handler: lambdas/authorizer/online.handler
    description: security authorizer for online cognito access token check
    package:  
      include:
        - lambdas/authorizer/online.js
  
  preSignUp:
    handler: lambdas/cognito/pre-signup.handler
    description: COGNITO - auto confirm user before signup
    events:
      - cognitoUserPool:
          pool: countdown-user-pool
          trigger: PreSignUp

  defineAuthChallenge:
    handler: lambdas/cognito/define-auth-challenge.main
    description: COGNITO - manage flow of custom auth
    events:
      - cognitoUserPool:
          pool: countdown-user-pool
          trigger: DefineAuthChallenge

  createAuthChallenge:
    handler: lambdas/cognito/create-auth-challenge.main
    description: COGNITO - create and email unique OTP
    events:
      - cognitoUserPool:
          pool: countdown-user-pool
          trigger: CreateAuthChallenge

  verifyAuthChallengeResponse:
    handler: lambdas/cognito/verify-auth-challenge-response.main
    description: COGNITO - check if user entered correct OTP
    events:
      - cognitoUserPool:
          pool: countdown-user-pool
          trigger: VerifyAuthChallengeResponse

  postEvent:
    handler: lambdas/postEvent.main
    events:
      - http:
          path: /event
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          # authorizer:
          #   name: authorizer_online
          #   resultTtlInSeconds: 240
          #   identitySource: method.request.header.token
          #   type: token
    description: adds new event to database
    package:  
      include:
        - postEvent.js
  
  getAllEvents:
    handler: lambdas/getAllEvents.main
    events:
      - http:
          path: /events
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          # authorizer:
          #   name: authorizer_online
          #   resultTtlInSeconds: 240
          #   identitySource: method.request.header.token
          #   type: token
    description: gets all events a specific user has created
    package:  
      include:
        - getAllEvents.js
  
  viewPrivateEvent:
    handler: lambdas/viewPrivateEvent.main
    events:
      - http:
          path: /event/{eventId}
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          # authorizer:
          #   name: authorizer_online
          #   resultTtlInSeconds: 240
          #   identitySource: method.request.header.token
          #   type: token
    description: gets all events a specific user has created
    package:  
      include:
        - viewPrivateEvent.js

resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}